// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  PARTICIPANT
  JUDGE
}

enum CompetitionStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  username           String        @unique
  passwordHash       String
  role               UserRole
  externalId         String?
  profile            Json?
  competitions       Competition[] @relation("CompetitionParticipants")
  judgingAssignments Judge[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Submission         Submission[]
}

model Competition {
  id           String            @id @default(uuid())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime
  criteria     Json
  status       CompetitionStatus @default(DRAFT)
  organizerId  String
  participants User[]            @relation("CompetitionParticipants")
  judges       Judge[]
  submissions  Submission[]
  settings     Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Submission {
  id            String       @id @default(uuid())
  competitionId String
  competition   Competition  @relation(fields: [competitionId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  content       Json
  evaluations   Evaluation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Judge {
  id                 String       @id @default(uuid())
  userId             String
  user               User         @relation(fields: [userId], references: [id])
  competitionId      String
  competition        Competition  @relation(fields: [competitionId], references: [id])
  assignmentStrategy String
  evaluations        Evaluation[]
  createdAt          DateTime     @default(now())
}

model Evaluation {
  id           String     @id @default(uuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id])
  judgeId      String
  judge        Judge      @relation(fields: [judgeId], references: [id])
  score        Float
  feedback     String?
  criteria     Json
  createdAt    DateTime   @default(now())
}
